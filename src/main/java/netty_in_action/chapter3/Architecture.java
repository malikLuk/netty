/**
 *
 * Более детально о Нетти и основных ее компонентах.
 * Сетевые абстракции Нетти:
 *  - Channel - Сокеты
 *  - EventLoop - управление процессом, многопоточность, параллелизм
 *  - ChannelFuture - асинхронные оповещения.
 *
 * Интерфейс Channel.
 * Основные операции ввода-вывода(bind(), connect(), read(), write()) зависят от примитивов, предоставляемых сетевыми
 * Транспортироващиками. Для сетевого взаимодействия, основанного на Java, фундаментальной конструкцией является класс
 * Socket. В Нетти есть интерфейс Channel, который предоставляет АПИ, существенно снижающую сложность работы непосредственно
 * с сокетами. В дополнение к этому, Channel - это корень обширной иерархии классов, имеющих множетсво предопределенных
 * специализированных реализаций:
 *  - EmbeddedChannel
 *  - LocalServerChannel
 *  - NioDatagramChannel
 *  - NioSctpChannel
 *  - NioSocketChannel
 *
 * Интерфейс EventLoop
 * EventLoop - это ключевая Нетти-абстракция для обработки событий, которые происходят во время жизни соединения. На
 * картинке pic1 показаны взаимоотношения между Channel, EventLoop, Thread и EventLoopGroup:
 *  - одна EventLoopGroup содержит одну или более EventLoop
 *  - EventLoop связан с потоком
 *  - Все события ввода-вывода, проходящие через EventLoop, обрабатываются выделенным ему потоком
 *  - Channel на время своей жизни ассоциирован с одним EventLoop
 *  - Один EventLoop может работать с несколькими Channel
 * Обратим внимание, что конструкция, при котторой ввод и вывод для конкретного канала выполняется одним и тем же потоком
 * практически исключает необходимость синхронизации.
 *
 * */

package netty_in_action.chapter3;

/**
 * Created by Lukmanov.MN on 23.08.2018.
 */
public class Architecture {
}
